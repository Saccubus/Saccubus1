/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : Niwango.g
 *     -                            On : 2010-06-06 19:55:47
 *     -                for the parser : NiwangoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser NiwangoParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pNiwangoParser, which is returned from a call to NiwangoParserNew().
 *
 * The methods in pNiwangoParser are  as follows:
 *
 *  - NiwangoParser_script_return      pNiwangoParser->script(pNiwangoParser)
 *  - NiwangoParser_stmt_return      pNiwangoParser->stmt(pNiwangoParser)
 *  - NiwangoParser_expr_return      pNiwangoParser->expr(pNiwangoParser)
 *  - NiwangoParser_expr5_return      pNiwangoParser->expr5(pNiwangoParser)
 *  - NiwangoParser_expr4_return      pNiwangoParser->expr4(pNiwangoParser)
 *  - NiwangoParser_expr3_return      pNiwangoParser->expr3(pNiwangoParser)
 *  - NiwangoParser_expr2_return      pNiwangoParser->expr2(pNiwangoParser)
 *  - NiwangoParser_expr1_return      pNiwangoParser->expr1(pNiwangoParser)
 *  - NiwangoParser_term_return      pNiwangoParser->term(pNiwangoParser)
 *  - NiwangoParser_postfix_return      pNiwangoParser->postfix(pNiwangoParser)
 *  - NiwangoParser_primary_return      pNiwangoParser->primary(pNiwangoParser)
 *  - NiwangoParser_array_return      pNiwangoParser->array(pNiwangoParser)
 *  - NiwangoParser_opassign_op_return      pNiwangoParser->opassign_op(pNiwangoParser)
 *  - NiwangoParser_args_return      pNiwangoParser->args(pNiwangoParser)
 *  - NiwangoParser_arg_return      pNiwangoParser->arg(pNiwangoParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_NiwangoParser_H
#define _NiwangoParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct NiwangoParser_Ctx_struct NiwangoParser, * pNiwangoParser;



#include "../node/node.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct NiwangoParser_script_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_script_return;

typedef struct NiwangoParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_stmt_return;

typedef struct NiwangoParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr_return;

typedef struct NiwangoParser_expr5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr5_return;

typedef struct NiwangoParser_expr4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr4_return;

typedef struct NiwangoParser_expr3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr3_return;

typedef struct NiwangoParser_expr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr2_return;

typedef struct NiwangoParser_expr1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_expr1_return;

typedef struct NiwangoParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_term_return;

typedef struct NiwangoParser_postfix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_postfix_return;

typedef struct NiwangoParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_primary_return;

typedef struct NiwangoParser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_array_return;

typedef struct NiwangoParser_opassign_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    const gchar* op;
}
    NiwangoParser_opassign_op_return;

typedef struct NiwangoParser_args_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_args_return;

typedef struct NiwangoParser_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    Node* node;
}
    NiwangoParser_arg_return;



/** Context tracking structure for NiwangoParser
 */
struct NiwangoParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     NiwangoParser_script_return (*script)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_stmt_return (*stmt)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr_return (*expr)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr5_return (*expr5)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr4_return (*expr4)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr3_return (*expr3)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr2_return (*expr2)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_expr1_return (*expr1)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_term_return (*term)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_postfix_return (*postfix)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_primary_return (*primary)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_array_return (*array)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_opassign_op_return (*opassign_op)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_args_return (*args)	(struct NiwangoParser_Ctx_struct * ctx);
     NiwangoParser_arg_return (*arg)	(struct NiwangoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred6_Niwango)	(struct NiwangoParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct NiwangoParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pNiwangoParser NiwangoParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pNiwangoParser NiwangoParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EXPONENT      10
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define T__25      25
#define T__24      24
#define T__23      23
#define T__22      22
#define T__21      21
#define T__20      20
#define OCTAL_ESC      14
#define FLOAT      6
#define ID      4
#define EOF      -1
#define T__19      19
#define T__16      16
#define ESC_SEQ      11
#define T__15      15
#define T__18      18
#define T__17      17
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__44      44
#define T__45      45
#define UNICODE_ESC      13
#define HEX_DIGIT      12
#define INT      5
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define WS      9
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define STRING_DOUBLE      7
#define STRING_SINGLE      8
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for NiwangoParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
