diff -urN frontend.org/trunk/src/saccubus/Converter.java frontend/trunk/src/saccubus/Converter.java
--- frontend.org/trunk/src/saccubus/Converter.java	2008-04-27 21:02:10 +0900
+++ frontend/trunk/src/saccubus/Converter.java	2009-05-07 02:40:33 +0900
@@ -7,6 +7,7 @@
 import saccubus.conv.ConvertToVideoHook;
 import java.net.URLEncoder;
 import java.util.Properties;
+import saccubus.util.Cws2Fws;
 
 /**
  * <p>タイトル: さきゅばす</p>
@@ -327,6 +328,8 @@
 	private static final int CODE_CONVERTING_ABORTED = 100;
 
 	private int converting_video(String vhook_path) {
+        File fwsFile = Cws2Fws.createFws(VideoFile);
+
 		StringBuffer sb = new StringBuffer();
 		sb.append("\"");
 		sb.append(Setting.getFFmpegPath().replace("\\", "\\\\"));
@@ -336,9 +339,13 @@
 		sb.append(" ");
 		sb.append(InOption);
 		sb.append(" -i ");
-		sb.append("\"");
-		sb.append(VideoFile.getPath().replace("\\", "\\\\"));
-		sb.append("\"");
+		if (fwsFile == null) {
+			sb.append("\"");
+			sb.append(VideoFile.getPath().replace("\\", "\\\\"));
+			sb.append("\"");
+		} else {
+			sb.append(fwsFile.getPath().replace("\\", "\\\\"));
+		}
 		sb.append(" ");
 		sb.append(OutOption);
 		sb.append(" \"");
@@ -377,7 +384,11 @@
 		} catch (IOException ex) {
 			ex.printStackTrace();
 			return -1;
-		}
+        } finally {
+            if (fwsFile != null) {
+                fwsFile.delete();
+            }
+        }
 	}
 
 	private boolean addVhookSetting(StringBuffer sb, String vhook_path) {
diff -urN frontend.org/trunk/src/saccubus/net/NicoClient.java frontend/trunk/src/saccubus/net/NicoClient.java
--- frontend.org/trunk/src/saccubus/net/NicoClient.java	2008-04-27 21:02:10 +0900
+++ frontend/trunk/src/saccubus/net/NicoClient.java	2009-05-07 01:27:54 +0900
@@ -228,7 +228,10 @@
 			return false;
 		}
 		try {
-			String url = "http://www.nicovideo.jp/api/getflv?v=" + tag;
+			String url = "http://www.nicovideo.jp/api/getflv/" + tag;
+			if (tag.startsWith("nm")) {
+				url += "?as3=1";
+			}
 			System.out.print("Getting video informations...");
 			HttpURLConnection con = (HttpURLConnection) (new URL(url))
 					.openConnection(ConProxy);
diff -urN frontend.org/trunk/src/saccubus/util/Cws2Fws.java frontend/trunk/src/saccubus/util/Cws2Fws.java
--- frontend.org/trunk/src/saccubus/util/Cws2Fws.java	1970-01-01 09:00:00 +0900
+++ frontend/trunk/src/saccubus/util/Cws2Fws.java	2009-05-07 02:26:55 +0900
@@ -0,0 +1,111 @@
+package saccubus.util;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.zip.InflaterInputStream;
+
+/**
+ *
+ * @author yuki
+ */
+public class Cws2Fws {
+
+	private static final String CWS = "CWS";
+	private static final String FWS = "FWS";
+
+	/**
+	 * 圧縮SWFかどうか判定する.
+	 * @param file 判定対象.
+	 * @return 圧縮SWFであればtrue.
+	 */
+	public static boolean isCws(File file) {
+		BufferedInputStream bis = null;
+		try {
+			bis = new BufferedInputStream(new FileInputStream(file));
+			byte header[] = new byte[CWS.length()];
+			bis.read(header, 0, header.length);
+			if (CWS.equals(new String(header))) {
+				return true;
+			}
+		} catch (IOException ex) {
+			Logger.getLogger(Cws2Fws.class.getName()).log(Level.SEVERE, null, ex);
+		} finally {
+			if (bis != null) {
+				try {
+					bis.close();
+				} catch (IOException ex) {
+					Logger.getLogger(Cws2Fws.class.getName()).log(Level.SEVERE, null, ex);
+				}
+			}
+		}
+		return false;
+	}
+
+	/**
+	 * 圧縮SWFを展開する.
+	 * @param in 展開対象.
+	 * @return 展開後のファイル. 対象が圧縮SWFでなければnull.
+	 */
+	public static File createFws(File in) {
+		if (!isCws(in)) {
+			return null;
+		}
+		File out = new File("fws_tmp.swf");
+		InputStream is = null;
+		OutputStream os = null;
+		try {
+			final int headerSize = 8;
+			byte header[] = new byte[headerSize];
+			is = new FileInputStream(in);
+			int size = 0;
+			while (size < headerSize) {
+				int read = is.read(header, size, headerSize);
+				if (read < 0) {
+					throw new IOException("ファイルフォーマット不正");
+				}
+				size += read;
+			}
+			header[0] = "F".getBytes()[0]; // CWS -> FWS
+
+			os = new BufferedOutputStream(new FileOutputStream(out));
+			os.write(header);
+
+			byte buffer[] = new byte[1024 * 1024];
+			InflaterInputStream iis = new InflaterInputStream(is);
+			while (true) {
+				int rs = iis.read(buffer);
+				if (rs < 0) {
+					break;
+				}
+				os.write(buffer, 0, rs);
+			}
+			return out;
+		} catch (IOException ex) {
+			Logger.getLogger(Cws2Fws.class.getName()).log(Level.SEVERE, null, ex);
+		} finally {
+			if (is != null) {
+				try {
+					is.close();
+				} catch (IOException ex) {
+					Logger.getLogger(Cws2Fws.class.getName()).log(Level.SEVERE, null, ex);
+				}
+			}
+			if (os != null) {
+				try {
+					os.close();
+				} catch (IOException ex) {
+					Logger.getLogger(Cws2Fws.class.getName()).log(Level.SEVERE, null, ex);
+				}
+			}
+		}
+		return null;
+	}
+}
